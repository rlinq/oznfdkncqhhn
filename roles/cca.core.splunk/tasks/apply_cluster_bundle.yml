---
# tasks file for cca.core.splunk
#
# Description:
#
# Prerequisite:
#
# Author: Roger Lindquist (github.com/rlinq)
#
# Release: 2023.1.1

- name: Check if there is a pending config bundle to be pushed
  ansible.builtin.stat:
    path: "{{ cluster_bundle_push_pending }}"
  register: stat_cluster_bundle_push_pending

- name: Login and check bundle restart status
  block:
    - name: Include tasks to login to splunk cli
      ansible.builtin.include_tasks:
        splunk_login.yml

    - name: Set fact of current epoc
      ansible.builtin.set_fact:
        current_epoch: "{{ ansible_date_time.epoch | int -10 }}"

    - name: Apply cluster in validate mode
      ansible.builtin.shell:
        cmd: "{{ splunk_path }}/bin/splunk validate cluster-bundle --check-restart"
      register: validate_bundle_check_restart_status
      changed_when: false

    - name: Wait until last_validated_bundle is more recent than previous timestamp
      ansible.builtin.shell:
        cmd: "{{ splunk_path }}/bin/splunk show cluster-bundle-status --check-restart | grep -A4 last_validated_bundle | grep timestamp | awk -F= '{ print $2}' | awk -F' ' '{ print $1 }'"
      register: last_check_restart_bundle_epoch
      retries: 40
      delay: 15
      until: last_check_restart_bundle_epoch.stdout | int > current_epoch | int
      changed_when: false
      when:
        - current_splunk_enterprise_version | default(splunk_enterprise_version) is version('9.0.0', '<=') or
          "'Created new bundle with checksum' in validate_bundle_check_restart_status.stdout"

    - name: Check validation status
      ansible.builtin.shell:
        cmd: "{{ splunk_path }}/bin/splunk show cluster-bundle-status --check-restart | grep cluster_status"
      register: cluster_bundle_validation_status
      retries: 40
      delay: 15
      until: "'None' in cluster_bundle_validation_status.stdout"
      changed_when: false

    - name: Wait for peer report of rolling restart status after validating cluster-bundle
      ansible.builtin.shell:
        cmd: "{{ splunk_path }}/bin/splunk show cluster-bundle-status"
      register: cluster_bundle_restart_status
      retries: "{{ cluster_bundle_status_command_retries | default(30) }}"
      delay: 60
      until: cluster_bundle_restart_status.stdout | default('') | regex_search('(cluster_status=None)')
      check_mode: no
      changed_when: false

    - name: Fail task if bundle validation errors are found
      ansible.builtin.debug:
        msg: "FATAL: Bundle validation errors found"
      failed_when:
        - cluster_bundle_restart_status.stdout | default('') | regex_search('bundle_validation_errors')

    - name: Create a state file if a index peer restart is needed
      ansible.builtin.file:
        path: "{{ rolling_restart_pending }}"
        state: touch
      when:
        - cluster_bundle_restart_status.stdout | default('') | regex_search('last_check_restart_result=restart required')

    - name: Prompt for confirmation of a cluster-bundle push that triggers a rolling restart
      ansible.builtin.pause:
        prompt: A rolling restart is required, continue? (yes/no)
      register: proceed_with_rolling_restart
      when:
        - prompt_rolling_restart | default(false)

    - name: Prompt user when a non-expected answer is received
      ansible.builtin.pause:
        prompt: "Didn't receive yes as an answer, run playbook again to perform the required rolling restart"
        minutes: 1
      when:
        - proceed_with_rolling_restart.user_input | default('no') != "yes"
        - prompt_rolling_restart | default(false)
      failed_when:
        - proceed_with_rolling_restart.user_input | default('no') != "yes"
        - prompt_rolling_restart | default(false)
  when:
    - not ansible_check_mode
    - stat_cluster_bundle_push_pending.stat.exists

- name: Apply cluster-bundle
  block:
    - name: Include tasks to login to splunk cli
      ansible.builtin.include_tasks:
        splunk_login.yml

    - name: Apply cluster-bundle on cluster manager
      ansible.builtin.shell: "{{ splunk_path }}/bin/splunk apply cluster-bundle --answer-yes"
      changed_when: false

    - name: Cleanup state file for rolling restart
      ansible.builtin.file:
        path: "{{ rolling_restart_pending }}"
        state: absent
      when:
        - cluster_bundle_restart_status.stdout | default('') | regex_search('last_check_restart_result=restart required')

    - name: Cleanup state file for bundle push
      ansible.builtin.file:
        path: "{{ cluster_bundle_push_pending }}"
        state: absent

    - name: Include tasks check Pre-flight status
      ansible.builtin.include_tasks:
        check_preflight_status.yml
      vars:
        command_retries: "{{ preflight_command_retries | default(30) }}"
  when:
    - not ansible_check_mode
    - stat_cluster_bundle_push_pending.stat.exists
